/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { approveBookReturn } from '../fn/book/approve-book-return';
import { ApproveBookReturn$Params } from '../fn/book/approve-book-return';
import { BookResponse } from '../models/book-response';
import { borrowBook } from '../fn/book/borrow-book';
import { BorrowBook$Params } from '../fn/book/borrow-book';
import { createBook } from '../fn/book/create-book';
import { CreateBook$Params } from '../fn/book/create-book';
import { getAllBooks } from '../fn/book/get-all-books';
import { GetAllBooks$Params } from '../fn/book/get-all-books';
import { getAllBooksByOwner } from '../fn/book/get-all-books-by-owner';
import { GetAllBooksByOwner$Params } from '../fn/book/get-all-books-by-owner';
import { getAllBorrowedBooks } from '../fn/book/get-all-borrowed-books';
import { GetAllBorrowedBooks$Params } from '../fn/book/get-all-borrowed-books';
import { getAllReturnedBooks } from '../fn/book/get-all-returned-books';
import { GetAllReturnedBooks$Params } from '../fn/book/get-all-returned-books';
import { getBookById } from '../fn/book/get-book-by-id';
import { GetBookById$Params } from '../fn/book/get-book-by-id';
import { PaginationResponseBookResponse } from '../models/pagination-response-book-response';
import { PaginationResponseBorrowedBookResponse } from '../models/pagination-response-borrowed-book-response';
import { returnBorrowedBook } from '../fn/book/return-borrowed-book';
import { ReturnBorrowedBook$Params } from '../fn/book/return-borrowed-book';
import { setArchivedStatus } from '../fn/book/set-archived-status';
import { SetArchivedStatus$Params } from '../fn/book/set-archived-status';
import { setSharableStatus } from '../fn/book/set-sharable-status';
import { SetSharableStatus$Params } from '../fn/book/set-sharable-status';
import { uploadBookCoverImage } from '../fn/book/upload-book-cover-image';
import { UploadBookCoverImage$Params } from '../fn/book/upload-book-cover-image';


/**
 * Book endpoints
 */
@Injectable({ providedIn: 'root' })
export class BookService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllBooks()` */
  static readonly GetAllBooksPath = '/books';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllBooks()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllBooks$Response(params?: GetAllBooks$Params, context?: HttpContext): Observable<StrictHttpResponse<PaginationResponseBookResponse>> {
    return getAllBooks(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllBooks$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllBooks(params?: GetAllBooks$Params, context?: HttpContext): Observable<PaginationResponseBookResponse> {
    return this.getAllBooks$Response(params, context).pipe(
      map((r: StrictHttpResponse<PaginationResponseBookResponse>): PaginationResponseBookResponse => r.body)
    );
  }

  /** Path part for operation `createBook()` */
  static readonly CreateBookPath = '/books';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createBook()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createBook$Response(params?: CreateBook$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return createBook(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createBook$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createBook(params?: CreateBook$Params, context?: HttpContext): Observable<number> {
    return this.createBook$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `uploadBookCoverImage()` */
  static readonly UploadBookCoverImagePath = '/books/cover/{book-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadBookCoverImage()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadBookCoverImage$Response(params: UploadBookCoverImage$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return uploadBookCoverImage(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadBookCoverImage$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadBookCoverImage(params: UploadBookCoverImage$Params, context?: HttpContext): Observable<number> {
    return this.uploadBookCoverImage$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `borrowBook()` */
  static readonly BorrowBookPath = '/books/borrow-book/{book-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `borrowBook()` instead.
   *
   * This method doesn't expect any request body.
   */
  borrowBook$Response(params: BorrowBook$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return borrowBook(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `borrowBook$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  borrowBook(params: BorrowBook$Params, context?: HttpContext): Observable<number> {
    return this.borrowBook$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `approveBookReturn()` */
  static readonly ApproveBookReturnPath = '/books/approve-return/{book-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `approveBookReturn()` instead.
   *
   * This method doesn't expect any request body.
   */
  approveBookReturn$Response(params: ApproveBookReturn$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return approveBookReturn(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `approveBookReturn$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  approveBookReturn(params: ApproveBookReturn$Params, context?: HttpContext): Observable<number> {
    return this.approveBookReturn$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `setSharableStatus()` */
  static readonly SetSharableStatusPath = '/books/sharable/{book-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `setSharableStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  setSharableStatus$Response(params: SetSharableStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return setSharableStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `setSharableStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  setSharableStatus(params: SetSharableStatus$Params, context?: HttpContext): Observable<number> {
    return this.setSharableStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `returnBorrowedBook()` */
  static readonly ReturnBorrowedBookPath = '/books/return-book/{book-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `returnBorrowedBook()` instead.
   *
   * This method doesn't expect any request body.
   */
  returnBorrowedBook$Response(params: ReturnBorrowedBook$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return returnBorrowedBook(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `returnBorrowedBook$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  returnBorrowedBook(params: ReturnBorrowedBook$Params, context?: HttpContext): Observable<number> {
    return this.returnBorrowedBook$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `setArchivedStatus()` */
  static readonly SetArchivedStatusPath = '/books/archived/{book-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `setArchivedStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  setArchivedStatus$Response(params: SetArchivedStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return setArchivedStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `setArchivedStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  setArchivedStatus(params: SetArchivedStatus$Params, context?: HttpContext): Observable<number> {
    return this.setArchivedStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `getBookById()` */
  static readonly GetBookByIdPath = '/books/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getBookById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBookById$Response(params: GetBookById$Params, context?: HttpContext): Observable<StrictHttpResponse<BookResponse>> {
    return getBookById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getBookById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBookById(params: GetBookById$Params, context?: HttpContext): Observable<BookResponse> {
    return this.getBookById$Response(params, context).pipe(
      map((r: StrictHttpResponse<BookResponse>): BookResponse => r.body)
    );
  }

  /** Path part for operation `getAllReturnedBooks()` */
  static readonly GetAllReturnedBooksPath = '/books/returned-books';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllReturnedBooks()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllReturnedBooks$Response(params?: GetAllReturnedBooks$Params, context?: HttpContext): Observable<StrictHttpResponse<PaginationResponseBorrowedBookResponse>> {
    return getAllReturnedBooks(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllReturnedBooks$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllReturnedBooks(params?: GetAllReturnedBooks$Params, context?: HttpContext): Observable<PaginationResponseBorrowedBookResponse> {
    return this.getAllReturnedBooks$Response(params, context).pipe(
      map((r: StrictHttpResponse<PaginationResponseBorrowedBookResponse>): PaginationResponseBorrowedBookResponse => r.body)
    );
  }

  /** Path part for operation `getAllBooksByOwner()` */
  static readonly GetAllBooksByOwnerPath = '/books/owner';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllBooksByOwner()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllBooksByOwner$Response(params?: GetAllBooksByOwner$Params, context?: HttpContext): Observable<StrictHttpResponse<PaginationResponseBookResponse>> {
    return getAllBooksByOwner(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllBooksByOwner$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllBooksByOwner(params?: GetAllBooksByOwner$Params, context?: HttpContext): Observable<PaginationResponseBookResponse> {
    return this.getAllBooksByOwner$Response(params, context).pipe(
      map((r: StrictHttpResponse<PaginationResponseBookResponse>): PaginationResponseBookResponse => r.body)
    );
  }

  /** Path part for operation `getAllBorrowedBooks()` */
  static readonly GetAllBorrowedBooksPath = '/books/borrowed-books';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllBorrowedBooks()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllBorrowedBooks$Response(params?: GetAllBorrowedBooks$Params, context?: HttpContext): Observable<StrictHttpResponse<PaginationResponseBorrowedBookResponse>> {
    return getAllBorrowedBooks(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllBorrowedBooks$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllBorrowedBooks(params?: GetAllBorrowedBooks$Params, context?: HttpContext): Observable<PaginationResponseBorrowedBookResponse> {
    return this.getAllBorrowedBooks$Response(params, context).pipe(
      map((r: StrictHttpResponse<PaginationResponseBorrowedBookResponse>): PaginationResponseBorrowedBookResponse => r.body)
    );
  }

}
